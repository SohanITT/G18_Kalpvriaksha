#include<stdio.h> 
#include<stdlib.h> 
#include<unistd.h> 
#include<sys/types.h> 
#include<string.h> 
#include<sys/wait.h> 
#include <stdio.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include<sys/msg.h>
void child();
void parent();  
int get_child_exit_status();
int g_messageId;
int g_commands=0;

typedef struct command_type
{
	long type;
	//The command to execute
	char command[32];
	//The arguments for the command
	int args[2];
} command_t;
typedef struct result_type 
{
	long type;
	int result;
} result_t;


int create_message_queue()
{
    key_t key = 'R';
    int message_id = msgget(key, 0666 | IPC_CREAT);
  
	return message_id;
}

int send_command(int messageId, command_t command)
{
    return msgsnd(messageId, &command, sizeof(command), 0);
}

command_t *recv_command(int messageId)
{
    command_t *p_command = (command_t *) malloc(sizeof(command_t));
    if(msgrcv(messageId,p_command,sizeof(command_t),1,0) == -1)
    {    
        perror("msgrcv");
    }
    return p_command;    
}


int send_result(int messageId, result_t result)
{
    result.type = 1;
    int resultSendStatus = msgsnd(messageId, &result, sizeof(result), 0);
    return  resultSendStatus;
	
}

result_t *recv_result(int messageId)
{
    result_t *p_result = (result_t * )malloc(sizeof(result_t));
     msgrcv(messageId,p_result,sizeof(result_t),1,0);
	return p_result;
}

void delete_message_queue(int messageId)
{
    msgctl(messageId, IPC_RMID, NULL); 
}

result_t *calculation(command_t commands)
{
    result_t *p_calculationResult = (result_t * )malloc(sizeof(result_t));
    switch(commands.command[0])
    {
        //Adding Operation    
        case 'A' :
            p_calculationResult -> result =  commands.args[0] + commands.args[1];
            break;
        //Substract Operation    
        case 'S' :
            p_calculationResult -> result =  commands.args[0] -commands.args[1];
            break;
        //Mulatiplication Operation    
        case 'M':
            p_calculationResult -> result =  commands.args[0] * commands.args[1];
            break;
        default :
            p_calculationResult -> result = 0;        
    }
    
    return p_calculationResult;
}

command_t *user_intput_commands()
{
    command_t *p_command = (command_t *) malloc(sizeof(command_t));
    scanf("%s",p_command->command);
    scanf("%d",&p_command->args[0]);
    scanf("%d",&p_command->args[1]);
    p_command->type = 1;
    
    return p_command;
}

void parent(){
	for(int i=1;i<=g_commands;i++)	
	{
		command_t *p_command = (command_t *) malloc(sizeof(command_t));
      	result_t *result;
        
        p_command = user_intput_commands();
        
        if(send_command(g_messageId,*p_command) ==-1)
            perror("send_command");
    
        usleep(1500);
      	result = recv_result(g_messageId);
        
        printf("CMD=%s, RES = %d\n",p_command->command,result->result);	
    }
    
    printf("Child exited with status:%d\n",get_child_exit_status());
	delete_message_queue(g_messageId);
}

void child()
{
  //  usleep(150);
	for(int i=1;i<=g_commands;i++)	
	{
		command_t *command = (command_t *) malloc(sizeof(command_t));
        result_t *result;
        command = recv_command(g_messageId);
        usleep(1500);
        result = calculation(*command);
        if(send_result(g_messageId,*result) == -1)
        {
            perror("send_result");
        }
    }
    
    exit(g_commands); 
}

//DO NOT MODIFY CODE BELOW
int main(int argc, char* argv[]) 
{ 
	pid_t childId; 
	g_messageId = create_message_queue(); 
	scanf("%d",&g_commands);
	if(g_messageId == 0 )
	{
		printf("Message Queue creation failed\n");
	}
	childId = fork(); 
	
	if (childId == 0) 
	{ 
		child();
	} else if(childId > 0 )
	{
       //Parent process 
		parent();
	}
} 

int get_child_exit_status()
{
        int status;
        wait(&status);
        return WEXITSTATUS(status);
}
